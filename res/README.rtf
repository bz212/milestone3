{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 **NBA Heist Game - README**\
\
### Overview\
NBA Heist is a turn-based strategy game where players attempt to defeat the legendary 'MJ' (Michael Jordan) by navigating various spaces, collecting items, and strategizing attacks. The game provides a unique experience through text-based interactions, where players must make strategic choices to achieve victory.\
\
### Installation\
1. **Requirements**:\
   - Java 8 or later.\
   - Command line interface (Terminal, Command Prompt, etc.).\
\
2. **Clone or Download**:\
   - Clone the repository from GitHub or download the ZIP file and extract it to your desired location.\
\
3. **Build the JAR File**:\
   - Compile the source code and generate a JAR file using your preferred IDE (e.g., Eclipse, IntelliJ) or through the command line:\
     ```\
     javac -d bin src/**/*.java\
     jar cfe NBAHeistGame.jar controller.Driver -C bin .\
     ```\
\
### Running the Game\
To start the game, use the following command:\
```\
java -jar Milestone3 <world-file.txt> <max-turns>\
```\
- `<world-file.txt>`: The configuration file that defines the game world.\
- `<max-turns>`: The maximum number of turns allowed in the game.\
\
**Example**:\
```\
java -jar Milestone3 world_spec.txt 50\
```\
\
### Gameplay Commands\
- **look around**: View the current space, including players and items.\
  - Example: `look around`\
- **move [space]**: Move to an adjacent space by specifying its name.\
  - Example: `move Kitchen`\
- **pick up [item]**: Pick up an item in the current space.\
  - Example: `pick up Shield`\
- **attack [player]**: Attack another player in the same space.\
  - Example: `attack Bob`\
\
### File Structure\
- **src/**: Contains all source code files organized by packages.\
- **test/**: Contains JUnit test classes for testing different components.\
- **res/**: Includes resources like the design document, example runs, and JAR file.\
- **README.md**: This file providing an overview and usage guide.\
\
### Testing\
Tests are written using JUnit 4 and can be found in the `test/` directory. To run the tests:\
- Use your IDE's integrated testing tools.\
- Or use the command line:\
  ```\
  java -cp .:/path/to/junit.jar org.junit.runner.JUnitCore <test-class-name>\
  ```\
\
### Example Runs\
The `res/` directory contains example run files demonstrating various gameplay scenarios:\
- **target_pet_effect.txt**: Shows how the pet affects visibility in the game.\
- **human_attempt.txt**: Demonstrates a human player making an attempt on the target.\
- **computer_win.txt**: Shows a computer-controlled player winning the game.\
\
### Tips for Success\
- Use the `look around` command to gather information before making decisions.\
- Be mindful of the target character's pet, which can obscure visibility and make attacks challenging.\
- Use items strategically to increase your chances of winning.\
\
}